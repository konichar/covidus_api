# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Assessment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, covidsceening: str=None, currentlocation: str=None, country: str=None, postalcode: str=None, height: str=None, weight: str=None, temperature: str=None, spo2: str=None, conjunctivalcongestion: str=None, nasalcongestion: str=None, headache: str=None, cough: str=None, sorethroat: str=None, sputumproduction: str=None, fatigue: str=None, hemoptysis: str=None, shortnessofbreath: str=None, nauseaofvomiting: str=None, diarrhea: str=None, myalgiaorarthralgia: str=None, chills: str=None):  # noqa: E501
        """Assessment - a model defined in Swagger

        :param id: The id of this Assessment.  # noqa: E501
        :type id: str
        :param covidsceening: The covidsceening of this Assessment.  # noqa: E501
        :type covidsceening: str
        :param currentlocation: The currentlocation of this Assessment.  # noqa: E501
        :type currentlocation: str
        :param country: The country of this Assessment.  # noqa: E501
        :type country: str
        :param postalcode: The postalcode of this Assessment.  # noqa: E501
        :type postalcode: str
        :param height: The height of this Assessment.  # noqa: E501
        :type height: str
        :param weight: The weight of this Assessment.  # noqa: E501
        :type weight: str
        :param temperature: The temperature of this Assessment.  # noqa: E501
        :type temperature: str
        :param spo2: The spo2 of this Assessment.  # noqa: E501
        :type spo2: str
        :param conjunctivalcongestion: The conjunctivalcongestion of this Assessment.  # noqa: E501
        :type conjunctivalcongestion: str
        :param nasalcongestion: The nasalcongestion of this Assessment.  # noqa: E501
        :type nasalcongestion: str
        :param headache: The headache of this Assessment.  # noqa: E501
        :type headache: str
        :param cough: The cough of this Assessment.  # noqa: E501
        :type cough: str
        :param sorethroat: The sorethroat of this Assessment.  # noqa: E501
        :type sorethroat: str
        :param sputumproduction: The sputumproduction of this Assessment.  # noqa: E501
        :type sputumproduction: str
        :param fatigue: The fatigue of this Assessment.  # noqa: E501
        :type fatigue: str
        :param hemoptysis: The hemoptysis of this Assessment.  # noqa: E501
        :type hemoptysis: str
        :param shortnessofbreath: The shortnessofbreath of this Assessment.  # noqa: E501
        :type shortnessofbreath: str
        :param nauseaofvomiting: The nauseaofvomiting of this Assessment.  # noqa: E501
        :type nauseaofvomiting: str
        :param diarrhea: The diarrhea of this Assessment.  # noqa: E501
        :type diarrhea: str
        :param myalgiaorarthralgia: The myalgiaorarthralgia of this Assessment.  # noqa: E501
        :type myalgiaorarthralgia: str
        :param chills: The chills of this Assessment.  # noqa: E501
        :type chills: str
        """
        self.swagger_types = {
            'id': str,
            'covidsceening': str,
            'currentlocation': str,
            'country': str,
            'postalcode': str,
            'height': str,
            'weight': str,
            'temperature': str,
            'spo2': str,
            'conjunctivalcongestion': str,
            'nasalcongestion': str,
            'headache': str,
            'cough': str,
            'sorethroat': str,
            'sputumproduction': str,
            'fatigue': str,
            'hemoptysis': str,
            'shortnessofbreath': str,
            'nauseaofvomiting': str,
            'diarrhea': str,
            'myalgiaorarthralgia': str,
            'chills': str
        }

        self.attribute_map = {
            'id': 'id',
            'covidsceening': 'covidsceening',
            'currentlocation': 'currentlocation',
            'country': 'country',
            'postalcode': 'postalcode',
            'height': 'height',
            'weight': 'weight',
            'temperature': 'temperature',
            'spo2': 'spo2',
            'conjunctivalcongestion': 'conjunctivalcongestion',
            'nasalcongestion': 'nasalcongestion',
            'headache': 'headache',
            'cough': 'cough',
            'sorethroat': 'sorethroat',
            'sputumproduction': 'sputumproduction',
            'fatigue': 'fatigue',
            'hemoptysis': 'hemoptysis',
            'shortnessofbreath': 'shortnessofbreath',
            'nauseaofvomiting': 'nauseaofvomiting',
            'diarrhea': 'diarrhea',
            'myalgiaorarthralgia': 'myalgiaorarthralgia',
            'chills': 'chills'
        }
        self._id = id
        self._covidsceening = covidsceening
        self._currentlocation = currentlocation
        self._country = country
        self._postalcode = postalcode
        self._height = height
        self._weight = weight
        self._temperature = temperature
        self._spo2 = spo2
        self._conjunctivalcongestion = conjunctivalcongestion
        self._nasalcongestion = nasalcongestion
        self._headache = headache
        self._cough = cough
        self._sorethroat = sorethroat
        self._sputumproduction = sputumproduction
        self._fatigue = fatigue
        self._hemoptysis = hemoptysis
        self._shortnessofbreath = shortnessofbreath
        self._nauseaofvomiting = nauseaofvomiting
        self._diarrhea = diarrhea
        self._myalgiaorarthralgia = myalgiaorarthralgia
        self._chills = chills

    @classmethod
    def from_dict(cls, dikt) -> 'Assessment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Assessment of this Assessment.  # noqa: E501
        :rtype: Assessment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Assessment.


        :return: The id of this Assessment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Assessment.


        :param id: The id of this Assessment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def covidsceening(self) -> str:
        """Gets the covidsceening of this Assessment.


        :return: The covidsceening of this Assessment.
        :rtype: str
        """
        return self._covidsceening

    @covidsceening.setter
    def covidsceening(self, covidsceening: str):
        """Sets the covidsceening of this Assessment.


        :param covidsceening: The covidsceening of this Assessment.
        :type covidsceening: str
        """

        self._covidsceening = covidsceening

    @property
    def currentlocation(self) -> str:
        """Gets the currentlocation of this Assessment.


        :return: The currentlocation of this Assessment.
        :rtype: str
        """
        return self._currentlocation

    @currentlocation.setter
    def currentlocation(self, currentlocation: str):
        """Sets the currentlocation of this Assessment.


        :param currentlocation: The currentlocation of this Assessment.
        :type currentlocation: str
        """

        self._currentlocation = currentlocation

    @property
    def country(self) -> str:
        """Gets the country of this Assessment.


        :return: The country of this Assessment.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this Assessment.


        :param country: The country of this Assessment.
        :type country: str
        """

        self._country = country

    @property
    def postalcode(self) -> str:
        """Gets the postalcode of this Assessment.


        :return: The postalcode of this Assessment.
        :rtype: str
        """
        return self._postalcode

    @postalcode.setter
    def postalcode(self, postalcode: str):
        """Sets the postalcode of this Assessment.


        :param postalcode: The postalcode of this Assessment.
        :type postalcode: str
        """

        self._postalcode = postalcode

    @property
    def height(self) -> str:
        """Gets the height of this Assessment.


        :return: The height of this Assessment.
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height: str):
        """Sets the height of this Assessment.


        :param height: The height of this Assessment.
        :type height: str
        """

        self._height = height

    @property
    def weight(self) -> str:
        """Gets the weight of this Assessment.


        :return: The weight of this Assessment.
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight: str):
        """Sets the weight of this Assessment.


        :param weight: The weight of this Assessment.
        :type weight: str
        """

        self._weight = weight

    @property
    def temperature(self) -> str:
        """Gets the temperature of this Assessment.


        :return: The temperature of this Assessment.
        :rtype: str
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: str):
        """Sets the temperature of this Assessment.


        :param temperature: The temperature of this Assessment.
        :type temperature: str
        """

        self._temperature = temperature

    @property
    def spo2(self) -> str:
        """Gets the spo2 of this Assessment.


        :return: The spo2 of this Assessment.
        :rtype: str
        """
        return self._spo2

    @spo2.setter
    def spo2(self, spo2: str):
        """Sets the spo2 of this Assessment.


        :param spo2: The spo2 of this Assessment.
        :type spo2: str
        """

        self._spo2 = spo2

    @property
    def conjunctivalcongestion(self) -> str:
        """Gets the conjunctivalcongestion of this Assessment.


        :return: The conjunctivalcongestion of this Assessment.
        :rtype: str
        """
        return self._conjunctivalcongestion

    @conjunctivalcongestion.setter
    def conjunctivalcongestion(self, conjunctivalcongestion: str):
        """Sets the conjunctivalcongestion of this Assessment.


        :param conjunctivalcongestion: The conjunctivalcongestion of this Assessment.
        :type conjunctivalcongestion: str
        """

        self._conjunctivalcongestion = conjunctivalcongestion

    @property
    def nasalcongestion(self) -> str:
        """Gets the nasalcongestion of this Assessment.


        :return: The nasalcongestion of this Assessment.
        :rtype: str
        """
        return self._nasalcongestion

    @nasalcongestion.setter
    def nasalcongestion(self, nasalcongestion: str):
        """Sets the nasalcongestion of this Assessment.


        :param nasalcongestion: The nasalcongestion of this Assessment.
        :type nasalcongestion: str
        """

        self._nasalcongestion = nasalcongestion

    @property
    def headache(self) -> str:
        """Gets the headache of this Assessment.


        :return: The headache of this Assessment.
        :rtype: str
        """
        return self._headache

    @headache.setter
    def headache(self, headache: str):
        """Sets the headache of this Assessment.


        :param headache: The headache of this Assessment.
        :type headache: str
        """

        self._headache = headache

    @property
    def cough(self) -> str:
        """Gets the cough of this Assessment.


        :return: The cough of this Assessment.
        :rtype: str
        """
        return self._cough

    @cough.setter
    def cough(self, cough: str):
        """Sets the cough of this Assessment.


        :param cough: The cough of this Assessment.
        :type cough: str
        """

        self._cough = cough

    @property
    def sorethroat(self) -> str:
        """Gets the sorethroat of this Assessment.


        :return: The sorethroat of this Assessment.
        :rtype: str
        """
        return self._sorethroat

    @sorethroat.setter
    def sorethroat(self, sorethroat: str):
        """Sets the sorethroat of this Assessment.


        :param sorethroat: The sorethroat of this Assessment.
        :type sorethroat: str
        """

        self._sorethroat = sorethroat

    @property
    def sputumproduction(self) -> str:
        """Gets the sputumproduction of this Assessment.


        :return: The sputumproduction of this Assessment.
        :rtype: str
        """
        return self._sputumproduction

    @sputumproduction.setter
    def sputumproduction(self, sputumproduction: str):
        """Sets the sputumproduction of this Assessment.


        :param sputumproduction: The sputumproduction of this Assessment.
        :type sputumproduction: str
        """

        self._sputumproduction = sputumproduction

    @property
    def fatigue(self) -> str:
        """Gets the fatigue of this Assessment.


        :return: The fatigue of this Assessment.
        :rtype: str
        """
        return self._fatigue

    @fatigue.setter
    def fatigue(self, fatigue: str):
        """Sets the fatigue of this Assessment.


        :param fatigue: The fatigue of this Assessment.
        :type fatigue: str
        """

        self._fatigue = fatigue

    @property
    def hemoptysis(self) -> str:
        """Gets the hemoptysis of this Assessment.


        :return: The hemoptysis of this Assessment.
        :rtype: str
        """
        return self._hemoptysis

    @hemoptysis.setter
    def hemoptysis(self, hemoptysis: str):
        """Sets the hemoptysis of this Assessment.


        :param hemoptysis: The hemoptysis of this Assessment.
        :type hemoptysis: str
        """

        self._hemoptysis = hemoptysis

    @property
    def shortnessofbreath(self) -> str:
        """Gets the shortnessofbreath of this Assessment.


        :return: The shortnessofbreath of this Assessment.
        :rtype: str
        """
        return self._shortnessofbreath

    @shortnessofbreath.setter
    def shortnessofbreath(self, shortnessofbreath: str):
        """Sets the shortnessofbreath of this Assessment.


        :param shortnessofbreath: The shortnessofbreath of this Assessment.
        :type shortnessofbreath: str
        """

        self._shortnessofbreath = shortnessofbreath

    @property
    def nauseaofvomiting(self) -> str:
        """Gets the nauseaofvomiting of this Assessment.


        :return: The nauseaofvomiting of this Assessment.
        :rtype: str
        """
        return self._nauseaofvomiting

    @nauseaofvomiting.setter
    def nauseaofvomiting(self, nauseaofvomiting: str):
        """Sets the nauseaofvomiting of this Assessment.


        :param nauseaofvomiting: The nauseaofvomiting of this Assessment.
        :type nauseaofvomiting: str
        """

        self._nauseaofvomiting = nauseaofvomiting

    @property
    def diarrhea(self) -> str:
        """Gets the diarrhea of this Assessment.


        :return: The diarrhea of this Assessment.
        :rtype: str
        """
        return self._diarrhea

    @diarrhea.setter
    def diarrhea(self, diarrhea: str):
        """Sets the diarrhea of this Assessment.


        :param diarrhea: The diarrhea of this Assessment.
        :type diarrhea: str
        """

        self._diarrhea = diarrhea

    @property
    def myalgiaorarthralgia(self) -> str:
        """Gets the myalgiaorarthralgia of this Assessment.


        :return: The myalgiaorarthralgia of this Assessment.
        :rtype: str
        """
        return self._myalgiaorarthralgia

    @myalgiaorarthralgia.setter
    def myalgiaorarthralgia(self, myalgiaorarthralgia: str):
        """Sets the myalgiaorarthralgia of this Assessment.


        :param myalgiaorarthralgia: The myalgiaorarthralgia of this Assessment.
        :type myalgiaorarthralgia: str
        """

        self._myalgiaorarthralgia = myalgiaorarthralgia

    @property
    def chills(self) -> str:
        """Gets the chills of this Assessment.


        :return: The chills of this Assessment.
        :rtype: str
        """
        return self._chills

    @chills.setter
    def chills(self, chills: str):
        """Sets the chills of this Assessment.


        :param chills: The chills of this Assessment.
        :type chills: str
        """

        self._chills = chills
